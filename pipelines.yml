valuesFilePath: ./values.yml
resources:
  - name: templateRepository
    type: GITRepo
    configuration:
      path: {{ .Values.templateRepository.path }}
      gitProvider: {{ .Values.templateRepository.gitProvider }}
      {{ if .Values.templateRepository.branch1 }}
      branches:
        include: {{ .Values.templateRepository.branch}}
      {{ end }}
  #       branches:
  #         include: {{ .Values.templateRepository.branch }}
  #         exclude: {{ default "foo"  .Values.templateRepository.branch1 }}

  - name: goTemplateBinary
    type: FileSpec
    configuration:
      sourceArtifactory: {{ .Values.defaultArtifactory }}
      pattern: "jfrogpipelines/tools/pipelines-template"
      recursive: false
      flat: true

pipelines:
  - name: {{ .Values.publishTemplate.pipelineName }}
    configuration:
      environmentVariables:
        readOnly:
          templateFolder:
            default: {{ .Values.templateRepository.templateFolder }}
            description: Please mention the exact template folder location, where your templateDefinition.yml file is present in the repository
          templateNameSpace:
            default: {{ .Values.publishTemplate.namespace }}
            description: Please mention the namespace where you want your template to be uploaded to artifactory's jfrogpipelines
          templateName:
            default: {{ .Values.publishTemplate.name }}
            description: Please mention the name of your template
          version:
            default: {{ .Values.publishTemplate.version }}
            description: Please enter semantic version
    steps:
      - name: validate_and_publish_template
        type: Bash
        configuration:
          inputResources:
            - name: goTemplateBinary
            - name: templateRepository
              trigger: false
        execution:
          onExecute:
            - versionRegex='^([0-9]+\.){0,2}(\*|[0-9]+)$'
            - |
              if [[ $version =~ $versionRegex ]]; then
                echo "$version is valid"
              else
                echo "Please enter a valid semantic version"
                exit 1
              fi
            - |
              if [[ $templateNameSpace == 'jfrog' ]]; then
                echo "namespace cannot be jfrog, please choose a different namespace"
                exit 1
              fi
            - pushd $res_templateRepository_resourcePath
            - pushd $templateFolder
            - |
              if [ ! test -f "./templateDefinition.yml" ]; then
                echo "please provide valid template folder where your templateDefinition.yml is present in the repository"
              fi
            - touch values.yml
            - cp -vr $res_goTemplateBinary_resourcePath/pipelines-template ./pipelines-template
            - chmod +x ./pipelines-template
            - ls -ll
            - uname -m
            - ./pipelines-template apply --values-file ./values.yml --template-file ./templateDefinition.yml --output-file output.yml
            - jfrog rt upload ./templateDefinition.yml jfrogpipelines/templates/$templateNameSpace/$templateName/$version/templateDefinition.yml --recursive=true
            - |
              if test -f "./values.yml.example"; then
                jfrog rt upload ./values.yml.example jfrogpipelines/templates/$templateNameSpace/$templateName/$version/values.yml.example --recursive=true
              fi
            - |
              if test -f "./readme.md"; then
                jfrog rt upload ./readme.md jfrogpipelines/templates/$templateNameSpace/$templateName/$version/readme.md --recursive=true
              fi
            - popd