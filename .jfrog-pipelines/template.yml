valuesFilePath: values.yml

pipelines:
  - name: {{ .Values.metadata.pipelineName }}
    configuration:
      runtime:
        type: image
        image:
          auto:
            language: 'node'
            versions:
              - "16"
      jfrogCliVersion: "2"
      integrations:
        - name: {{ .Values.input.jfrogTokenIntegration }}
      environmentVariables:
        readOnly:
          timeUnit:
            values: ["year", "month", "day", "hour", "minute"]
            default: "month"
            description: The unit of the time interval. year, month, day, hour or minute are allowed values. Default month.
          timeInterval:
            default: 1
            description: The time interval to look back before deleting an artifact. Default 1.
          repos:
            default: "plugin-repo-1"
            description: A list of repositories to clean. This parameter is required.
          dryRun:
            default: "true"
            values: ["true", "false"]
            description: If this parameter is passed, artifacts will not actually be deleted. Default false.
          paceTimeMS:
            default: 100
            description: The number of milliseconds to delay between delete operations. Default 0.
          maxRepos:
            default: 100
            description: Maximum allowed repos to search
          maxArtifacts:
            default: 1000
            description: Maximum allowed artifacts to be deleted
      
      {{ if eq "true" "{{ .Values.controls.cron.enabled }}" }}
      inputResources:
        - name: {{ .Values.metadata.pipelineName }}_cron_trigger
      {{ end }}

    steps:
      - name: delete_artifacts
        type: Bash
        execution:
          onStart:
            - echo '===== CONFIGURING ARTIFACTORY ====='
            - jf c add --artifactory-url ${int_{{ .Values.input.jfrogTokenIntegration }}_url} --access-token ${int_{{ .Values.input.jfrogTokenIntegration }}_accessToken}
            - jf c show
            - isArtifactoryOnline=$(jf rt ping)
            - echo "isArtifactoryOnline = ${isArtifactoryOnline}"
            - echo "repos = ${repos}"
            - echo "paceTimeMS = ${paceTimeMS}"
            - |
              if [[ $isArtifactoryOnline != 'OK' ]]; then
                echo "Please check access token..."
                exit 1
              fi
            - |
              echo '===== VALIDATING INPUTS ====='
              if [[ -z "${repos}" ]]; then
                echo "Please provide at least one repo to proceed..."
                exit 1
              fi
          onExecute:
            - |
              function search() {
                echo "===== Fetching artifacts not downloaded since ${timeInterval} ${timeUnit} from now ====="
                echo '{"files":[{"aql":{"items.find":{"type":"file","stat.downloaded":{"$lt":"${threshold_timestamp}"}}},"sortBy":["stat.downloaded"],"sortOrder":"desc"}]}' >> plugin_search_template.aql
                echo "const fs=require('fs');const threshold_timestamp='${threshold_timestamp}';const aql=fs.readFileSync('plugin_search_template.aql',{encoding:'utf8'});const repos=process.argv[2];const rq=repos.split(',').map((repo)=>{return{'repo':repo}});const aqlO=JSON.parse(aql);aqlO.files[0].aql['items.find']['\'$or\'']=rq;fs.writeFileSync('plugin_search.aql',JSON.stringify(aqlO,null,1))" >> prepare_aql.js
                node prepare_aql.js ${repos} ${maxRepos}
                cat plugin_search.aql
                current_timestamp=$(node -e 'console.log(new Date().getTime())')
                echo ${current_timestamp}                
                actionable_artifacts=$(jf rt s --recursive --spec=plugin_search.aql --spec-vars "repo=${repos};threshold_timestamp=${current_timestamp};limit=${maxArtifacts}" --limit ${maxArtifacts})
                if [[ -z "${actionable_artifacts}" ]]; then
                  echo "No matching artifacts found for cleanup!"
                  exit 1
                fi
                echo '===== Following artifacts found for cleanup ====='
                actionable_artifact_paths=$(echo ${actionable_artifacts} | jq -r '.[].path')
                echo ${actionable_artifact_paths}
              }
              search
            - |              
              function cleanup() {
                if [[ ${dryRun} == 'true' ]]; then                
                  echo '==== Artifact cleanup skipped in Dry Run! ===='
                else
                  echo '===== Initiating cleanup with delay of ${paceTimeMS}ms between each artifact ====='
                  # DELETE
                fi
              }
              cleanup
          onComplete:
            - echo 'Log report'
            - echo 'Save report as downloadable artifact'