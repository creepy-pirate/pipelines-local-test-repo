valuesFilePath: values.yml

pipelines:
  - name: {{ .Values.metadata.pipelineName }}
    configuration:
      jfrogCliVersion: "2"
      integrations:
        - name: {{ .Values.input.jfrogTokenIntegration }}
      environmentVariables:
        readOnly:
          timeUnit:
            values: ["year", "month", "day", "hour", "minute"]
            default: "month"
            description: The unit of the time interval. year, month, day, hour or minute are allowed values. Default month.
          timeInterval:
            default: 1
            description: The time interval to look back before deleting an artifact. Default 1.
          repos:
            default: "plugin-repo-1"
            description: A list of repositories to clean. This parameter is required.
          dryRun:
            default: "false"
            values: ["true", "false"]
            description: If this parameter is passed, artifacts will not actually be deleted. Default false.
          paceTimeMS:
            default: 100
            description: The number of milliseconds to delay between delete operations. Default 0.
      
      {{ if eq "true" "{{ .Values.controls.cron.enabled }}" }}
      inputResources:
        - name: {{ .Values.metadata.pipelineName }}_cron_trigger
      {{ end }}

    steps:
      - name: delete_artifacts
        type: Bash
        execution:
          onStart:
            - echo '--- CONFIGURING ARTIFACTORY ---'
            - jf c add --artifactory-url ${int_{{ .Values.input.jfrogTokenIntegration }}_url} --access-token ${int_{{ .Values.input.jfrogTokenIntegration }}_accessToken}
            - jf c show
            - isArtifactoryOnline=$(jf rt ping)
            - echo "isArtifactoryOnline = ${isArtifactoryOnline}"
            - echo "repos = ${repos}"
            - echo "paceTimeMS = ${paceTimeMS}"
            - |
              if [[ $isArtifactoryOnline != 'OK' ]]; then
                echo "Please check access token..."
                exit 1
              fi
            - echo '--- VALIDATING INPUTS ---'
            - |
              if [[ -z "${repos}" ]]; then
                echo "Please provide at least one repo to proceed..."
                exit 1
              fi
          onExecute:
            - echo '--- Fetch artifacts based on conditions from repos ---'
            - |
              echo '{ "files": [ { "aql": { "items.find": { "type": "file", "repo": { "$match": "${repo}" }, "stat.downloaded": { "$lt": "${threshold_timestamp}" } } } } ] }' >> plugin_search.aql
              cat plugin_search.aql
            - jf rt s --spec=plugin_search.aql --spec-vars "repo=plugin-repo-*;threshold_timestamp=1674624550951"
            - echo 'Loop over artifacts and call delete with paceTimeMS delay'
          onComplete:
            - echo 'Log report'
            - echo 'Save report as downloadable artifact'