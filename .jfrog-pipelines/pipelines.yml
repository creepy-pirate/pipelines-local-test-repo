template: true
valuesFilePath: ./values.yml

####################################################################################################################
######################## AFTER COPYING AND PASTING THE NEW COPY-RELEASES YAML VERSION,  ############################
######################## ADJUST THE VALUES IN THE BELOW SECTION ACCORDING TO YOUR SERVICE NAME #####################
####################################################################################################################

###########################################     YAML VERSION - 2.1.5     ###########################################

# Define global yaml anchors, to be reused in this yaml file
#
# Note-
# These values are service specific. If you clone this pipeline for another service, only the values below need to be
# adjusted for the new service.
# For more details on using yaml anchors and aliases, see:
#  - Anchors - https://yaml.org/spec/1.2/spec.html#id2785586
#  - Aliases - https://yaml.org/spec/1.2/spec.html#id2786196
__globals:
  service:
    # Note- service details with spaces need to be quoted, e.g. '"foo bar"'
    displayName: &serviceDisplayName 'jfconfig'
    shortName: &serviceShortName 'jfcfg'
    includedServices: &serviceIncludedServices 'jfconfig'
    gitRepoPath: &serviceGitRepoPath 'INFS/jfconfig'
    preReleasePipeline: &servicePreReleasePipeline 'jfconfig_prerelease'
    buildPipeline: &serviceBuildPipeline 'jfconfig_build'
    releasePipeline: &serviceReleasePipeline 'jfconfig_release'
    postReleasePipeline: &servicePostReleasePipeline 'jfconfig_post_release'
    dvuPipeline: &dvuPipeline 'jfconfig_dvu'
    buildPipelineFirstStep: &serviceBuildPipelineFirstStep 'jfconfig_build'
    postReleasePipelineFirstStep: &servicePostReleasePipelineFirstStep 'promote_builds_to_staging_milestone_repositories'
    serviceReleaseMinor: &serviceReleaseMinor 'false'
  pipelineDefinition:
    serviceMilestoneCronTrigger: &serviceMilestoneCronTrigger 'jfconfig_milestone_cron_trigger'
    serviceReleasesProcessGitRepoResource: &serviceReleasesProcessGitRepoResource 'jfconfig_releases_process_bitbucket'
    serviceReleasesProcessGitRepoResourcePath: &serviceReleasesProcessGitRepoResourcePath '${res_jfconfig_releases_process_bitbucket_resourcePath}'
    #loadReleasesProcessPipelineStepCommons: &loadReleasesProcessPipelineStepCommons 'source "${res_jfconfig_releases_process_bitbucket_resourcePath}/build/ci/pipelines_step_setup.sh"'
    loadReleasesProcessStepCommonsFromTask: &loadReleasesProcessStepCommonsFromTask 'source "${res_jfconfig_releases_process_bitbucket_resourcePath}/${OUT_setup_step_commons_PIPE_STEP_COMMONS_PATH}"'
    servicePreReleasesProcessGitRepoResource: &servicePreReleasesProcessGitRepoResource 'jfconfig_pre_releases_process_bitbucket'
    servicePreReleasesProcessGitRepoResourcePath: &servicePreReleasesProcessGitRepoResourcePath '${res_jfconfig_pre_releases_process_bitbucket_resourcePath}'
    #loadPreReleasesProcessPipelineStepCommons: &loadPreReleasesProcessPipelineStepCommons 'source "${res_jfconfig_pre_releases_process_bitbucket_resourcePath}/build/ci/pipelines_step_setup.sh"'
    loadPreReleasesProcessStepCommonsFromTask: &loadPreReleasesProcessStepCommonsFromTask 'source "${res_jfconfig_pre_releases_process_bitbucket_resourcePath}/${OUT_setup_step_commons_PIPE_STEP_COMMONS_PATH}"'    
    servicePostReleaseGitRepoResource: &servicePostReleaseGitRepoResource 'jfconfig_release_bitbucket'
    servicePostReleaseGitRepoResourcePath: &servicePostReleaseGitRepoResourcePath '${res_jfconfig_release_bitbucket_resourcePath}'
    #loadPostReleasePipelineStepCommons: &loadPostReleasePipelineStepCommons 'source "${res_jfconfig_release_bitbucket_resourcePath}/build/ci/pipelines_step_setup.sh"'
    loadPostReleaseStepCommonsFromTask: &loadPostReleaseStepCommonsFromTask 'source "${res_jfconfig_release_bitbucket_resourcePath}/${OUT_setup_step_commons_PIPE_STEP_COMMONS_PATH}"'
    dvuGitRepoResource: &dvuGitRepoResource 'jfconfig_dvu_bitbucket'
    dvuGitRepoResourcePath: &dvuGitRepoResourcePath '${res_jfconfig_dvu_bitbucket_resourcePath}'
    loadDependencyVersionUpdatePipelineStepCommons: &loadDependencyVersionUpdatePipelineStepCommons 'source "${res_jfconfig_release_bitbucket_resourcePath}/build/ci/pipelines_step_setup.sh"'
    gitPushSshIntegration: &gitPushSshIntegration 'artifactory_bitbucket_push'
    bitBucketIntegration: &bitBucketIntegration 'JFrog_bitbucket'
    preReleaseRetriggerPropertyBag: &preReleaseRetriggerPropertyBag 'jfconfig_prerelease_retrigger'
    promoteReleasePropertyBag: &promoteReleasePropertyBag 'jfconfig_promote_release_properties'
    releaseServicesPropertyBag: &releaseServicesPropertyBag 'jfconfig_release_services_properties'
    dvuSkip: &dvuSkip 'true'
    dvuComponentName: &dvuComponentName 'jfconfig'
    dvuVersionChecksPropertyBag: &dvuChecksPropertyBag 'jfconfig_dvu_checks_properties'
    dvuVersionJirasPropertyBag: &dvuJirasPropertyBag 'jfconfig_dvu_jiras_properties'
    dvuVersionBranchesPropertyBag: &dvuBranchesPropertyBag 'jfconfig_dvu_branches_properties'
    dvuCronTrigger: &dvuCronTrigger 'jfconfig_dvu_cron_trigger'
    #    dvuWebhook: &dvuWebhook ''
    #    dvuIncomingWebhookIntegration: &dvuIncomingWebhookIntegration ''
    #    dvuIncomingWebhookIntegrationUrl: &dvuIncomingWebhookIntegrationUrl ''
    enableUTP: &ENABLE_UTP 'false'
    utpComponentName: &utpComponentName 'jfconfig'
    utpIncomingWebhookIntegration: &utpIncomingWebhookIntegration 'utp_component'
    utpIncomingWebhookIntegrationUrl: &utpIncomingWebhookIntegrationUrl 'https://entplus.jfrog.io/pipelines/api/v1/projectIntegrations/356/hook'
    utpPipelineBranchName: &utpPipelineBranchName 'master'
    utpTestPipelineBranchName: &utpTestPipelineBranchName 'master'
    utpWaitStatusStepName: &utpWaitStatusStepName 'wait_utp_status'
    triggerUtpPropertyBag: &triggerUtpPropertyBag 'jfdev_ci_jfconfig_trigger_utp_properties'
    skipTriggerUtpPropertyBag: &skipTriggerUtpPropertyBag 'jfdev_ci_jfconfig_skip_utp_properties'

#############################################################################################################################################################
#################################### BELOW THIS LINE, HAVE THE LATEST TEMPLATE VERSION COPIED PROPERLY, NO NEED TO MODIFY ANY VALUE #########################
#############################################################################################################################################################

resources:
  # PreRelease resources
  {{ if or ( eq "{{gitBranch}}" "master" ) ( hasPrefix "infra" "{{gitBranch}}" ) }}
  - name: *preReleaseRetriggerPropertyBag
    type: PropertyBag
    configuration:
      prerelease_branch_name: ""
  - name: *servicePreReleasesProcessGitRepoResource
    type: GitRepo
    configuration:
      path: *serviceGitRepoPath
      gitProvider: JFrog_bitbucket
      branches:
        include: ^{{gitBranch}}$
  {{ end }}

  # Release resources
  {{ if or ( eq "{{gitBranch}}" "master" ) ( hasPrefix "preRelease" "{{gitBranch}}" ) ( hasPrefix "infra" "{{gitBranch}}" ) ( hasPrefix "feature" "{{gitBranch}}" ) ( hasPrefix "bugfix" "{{gitBranch}}" ) }}
  - name: *releaseServicesPropertyBag
    type: PropertyBag
    configuration:
      last_released_run_number: -1
  - name: *serviceReleasesProcessGitRepoResource
    type: GitRepo
    configuration:
      path: *serviceGitRepoPath
      gitProvider: JFrog_bitbucket
      branches:
        include: ^{{gitBranch}}$
  {{ end }}

  # Cron milestone every 24 hours, only on master. Be sure to remove trigger from jenkins job
  - name: *serviceMilestoneCronTrigger
    type: CronTrigger
    configuration:
      interval: "*/24 * * * *"
      branches:
        include: "^master$"

  # PostRelease resources
  {{ if or ( hasPrefix "release" "{{gitBranch}}" ) ( hasPrefix "milestone" "{{gitBranch}}" ) }}
  - name: *promoteReleasePropertyBag
    type: PropertyBag
    configuration:
      post_release_run_number: -1
  - name: *triggerUtpPropertyBag
    type: PropertyBag
    configuration:
      trigger_utp: undefined
  - name: *skipTriggerUtpPropertyBag
    type: PropertyBag
    configuration:
      skip_utp: undefined
  {{ end }}

  # Global resources
  - name: *servicePostReleaseGitRepoResource
    type: GitRepo
    configuration:
      path: *serviceGitRepoPath
      gitProvider: JFrog_bitbucket
      branches:
        include: ^{{gitBranch}}$
      buildOn:
        commit: false

# Dependency version update resources
{{ if or ( eq "{{gitBranch}}" "master" ) }}
  - name: *dvuGitRepoResource
    type: GitRepo
    configuration:
      path: *serviceGitRepoPath
      gitProvider: JFrog_bitbucket
      branches:
        include: ^{{gitBranch}}$
  - name: *dvuChecksPropertyBag
    type: PropertyBag
    configuration:
      last_checks_run_number: -1
  - name: *dvuJirasPropertyBag
    type: PropertyBag
    configuration:
      last_jiras_run_number: -1
  - name: *dvuBranchesPropertyBag
    type: PropertyBag
    configuration:
      last_branches_run_number: -1
  - name: *dvuCronTrigger
    type: CronTrigger
    configuration:
      interval: '0 2 * * *' # Every day at 2 AM
      branches:
        include: master

##### INCOMING WEBHOOKS #####
#  - name: dvu_router_incoming_webhook
#    type: IncomingWebhook
#    configuration:
#      webhookName: dvu_router_test
{{ end }}

pipelines:
  # preRelease pipeline - available for master and infra/XXX branches
  {{ if or ( eq "{{gitBranch}}" "master" ) ( hasPrefix "infra" "{{gitBranch}}" ) }}
  - name: *servicePreReleasePipeline
    configuration:
      integrations:
        - name: jfdev_agent
        - name: entplus_deployer
        - name: docker_jfrog_io_reader
        - name: slack_platform_release_pipeline
        - name: slack_dev_foundation_alerts
        - name: entplus_jfrog_io_docker
        - name: aws_build_nodes_metrics
        - name: entplus_pipelines
        - name: jira_jfrog
      environmentVariables:
        readOnly:
          SUGGESTED_MAJOR:
            default: ""
            description: "[Required] Major version number for the new pre-release version (e.g. '7' in '7.25.x')"
          SUGGESTED_MINOR:
            default: ""
            description: "[Required] Minor version number for the new pre-release version (e.g. '25' in '7.25.x')"
          SKIP_STEP_STATUS_UPDATE:
            default: "true"
            description: "[DO_NOT_CHANGE] Skips step status update to bitbucket"
            values:
              - "true"
              - "false"
          SERVICES_TO_RELEASE:
            default: *serviceIncludedServices
            values:
              - *serviceIncludedServices
          SERVICE_SHORT_NAME:
            default: *serviceShortName
            values:
              - *serviceShortName
          SERVICE_DISPLAY_NAME:
            default: *serviceDisplayName
            values:
              - *serviceDisplayName
          SERVICE_INCLUDED_SERVICES:
            default: *serviceIncludedServices
            values:
              - *serviceIncludedServices
          SERVICE_BUILD_PIPELINE:
            default: *serviceBuildPipeline
            values:
              - *serviceBuildPipeline
          SERVICE_BUILD_PIPELINE_FIRST_STEP:
            default: *serviceBuildPipelineFirstStep
            values:
              - *serviceBuildPipelineFirstStep
          SERVICE_RELEASE_PIPELINE:
            default: *serviceReleasePipeline
            values:
              - *serviceReleasePipeline
          SERVICE_GIT_REPO_PATH:
            default: *serviceGitRepoPath
            values:
              - *serviceGitRepoPath
          PIPELINE_GIT_PUSH_SSH_INTEGRATION:
            default: *gitPushSshIntegration
            values:
              - *gitPushSshIntegration
          GIT_LFS_SKIP_SMUDGE:
            default: "true"
            description: "Git LFS skip the smudge process"
          PIPELINE_ARTIFACTORY_INTEGRATION:
            default: entplus_deployer
            values:
              - entplus_deployer
          PIPELINE_RETRIGGER_PROPERTY_BAG:
            default: *preReleaseRetriggerPropertyBag
            values:
              - *preReleaseRetriggerPropertyBag

    steps:
      - name: prepare_prerelease_pipeline
        type: Bash
        configuration:
          nodePool: ci_c5large
          priority: 1
          inputResources:
            - name: *servicePreReleasesProcessGitRepoResource
              trigger: false
          outputResources:
            - name: *preReleaseRetriggerPropertyBag
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePreReleasesProcessGitRepoResourcePath
              id: setup_step_commons
            - *loadPreReleasesProcessStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_prerelease.sh
          onExecute:
            - prepare_prerelease_pipeline_on_execute
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: create_branch_and_modify_prerelease_versions
        type: Bash
        configuration:
          nodePool: ci_c5large
          priority: 1
          inputResources:
            - name: *servicePreReleasesProcessGitRepoResource
              trigger: false
            - name: *preReleaseRetriggerPropertyBag
              trigger: false
          integrations:
            - name: *gitPushSshIntegration
          inputSteps:
            - name: prepare_prerelease_pipeline
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePreReleasesProcessGitRepoResourcePath
              id: setup_step_commons
            - *loadPreReleasesProcessStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_prerelease.sh
            - create_prerelease_branch_on_start
          onExecute:
            - create_prerelease_branch_on_execute
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: resolve_jfdev_metadata
        type: Bash
        configuration:
          nodePool: ci_c5large
          inputResources:
            - name: *servicePreReleasesProcessGitRepoResource
              trigger: false
          integrations:
            - name: *gitPushSshIntegration
          inputSteps:
            - name: prepare_prerelease_pipeline
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePreReleasesProcessGitRepoResourcePath
              id: setup_step_commons
            - *loadPreReleasesProcessStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_prerelease.sh
            - resolve_jfdev_metadata_on_start
          onExecute:
            - resolve_jfdev_metadata_on_execute
          onSuccess:
            - stepCommons_on_success
          onFailure:
            - stepCommons_on_failure
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete

      - name: check_repositories_exist
        type: Bash
        configuration:
          nodePool: ci_c5large
          priority: 1
          inputResources:
            - name: *servicePreReleasesProcessGitRepoResource
              trigger: false
            - name: *preReleaseRetriggerPropertyBag
              trigger: false
          inputSteps:
            - name: create_branch_and_modify_prerelease_versions
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePreReleasesProcessGitRepoResourcePath
              id: setup_step_commons
            - *loadPreReleasesProcessStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_prerelease.sh
            - check_repositories_exist_on_start
          onExecute:
            - check_repositories_exist_on_execute
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: wait_for_branch_sync
        type: Bash
        configuration:
          nodePool: ci_c5large
          priority: 1
          inputResources:
            - name: *servicePreReleasesProcessGitRepoResource
              trigger: false
            - name: *preReleaseRetriggerPropertyBag
              trigger: false
          inputSteps:
            - name: create_branch_and_modify_prerelease_versions
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePreReleasesProcessGitRepoResourcePath
              id: setup_step_commons
            - *loadPreReleasesProcessStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_prerelease.sh
          onExecute:
            - wait_for_branch_sync_on_execute
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: trigger_master_next_version_milestone
        type: Bash
        configuration:
          nodePool: ci_c5large
          priority: 1
          inputResources:
            - name: *servicePreReleasesProcessGitRepoResource
              trigger: false
          inputSteps:
            - name: create_branch_and_modify_prerelease_versions
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePreReleasesProcessGitRepoResourcePath
              id: setup_step_commons
            - *loadPreReleasesProcessStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_prerelease.sh
          onExecute:
            - trigger_master_next_version_milestone_on_execute_new
          onSuccess:
            - trigger_master_next_version_milestone_on_success || echo "[ERROR] trigger_master_next_version_milestone_on_success returned an error"
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: trigger_all_prerelease_branch_build
        type: Bash
        configuration:
          nodePool: ci_c5large
          priority: 1
          inputResources:
            - name: *servicePreReleasesProcessGitRepoResource
              trigger: false
            - name: *preReleaseRetriggerPropertyBag
              trigger: false
          inputSteps:
            - name: check_repositories_exist
            - name: wait_for_branch_sync
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePreReleasesProcessGitRepoResourcePath
              id: setup_step_commons
            - *loadPreReleasesProcessStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_prerelease.sh
          onExecute:
            - trigger_all_prerelease_branch_build_on_execute
          onSuccess:
            - trigger_all_prerelease_branch_build_on_success || echo "[ERROR] trigger_all_prerelease_branch_build_on_success returned an error"
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"
  {{ end }}

  # release pipeline - available for master, preRelease and all dev branches
  {{ if or ( eq "{{gitBranch}}" "master" ) ( hasPrefix "preRelease" "{{gitBranch}}" ) ( hasPrefix "infra" "{{gitBranch}}" ) ( hasPrefix "feature" "{{gitBranch}}" ) ( hasPrefix "bugfix" "{{gitBranch}}" ) }}
  - name: *serviceReleasePipeline
    configuration:
      integrations:
        - name: jfdev_agent
        - name: entplus_deployer
        - name: docker_jfrog_io_reader
        - name: slack_platform_release_pipeline
        - name: slack_dev_foundation_alerts
        - name: entplus_jfrog_io_docker
        - name: aws_build_nodes_metrics
        - name: entplus_pipelines
      environmentVariables:
        readOnly:
          SLACK_RELEASE_INTEGRATION_CHANNEL:
            default: "platform-release-pipeline"
          CI:
            default: "true"
            description: "[DO_NOT_CHANGE] disables interactive prompts and progress bar for the JFrog CLI"
          SKIP_STEP_STATUS_UPDATE:
            default: "true"
            description: "[DO_NOT_CHANGE] Skips step status update to bitbucket"
            values:
              - "true"
              - "false"
          SERVICES_TO_RELEASE:
            default: *serviceIncludedServices
            values:
              - *serviceIncludedServices
          PIPELINE_GIT_PUSH_SSH_INTEGRATION:
            default: *gitPushSshIntegration
            values:
              - *gitPushSshIntegration
          SERVICE_GIT_REPO_PATH:
            default: *serviceGitRepoPath
            values:
              - *serviceGitRepoPath
          GIT_LFS_SKIP_SMUDGE:
            default: "true"
            description: "Git LFS skip the smudge process"
          SERVICE_DISPLAY_NAME:
            default: *serviceDisplayName
            values:
              - *serviceDisplayName
          SERVICE_BUILD_PIPELINE:
            default: *serviceBuildPipeline
            values:
              - *serviceBuildPipeline
          SERVICE_POST_RELEASE_PIPELINE:
            default: *servicePostReleasePipeline
            values:
              - *servicePostReleasePipeline
          {{ if ( eq "{{gitBranch}}" "master" ) }}
          RELEASE_MINOR:
            default: *serviceReleaseMinor
            description: "Compute the next version as a minor"
            values:
              - "true"
              - "false"
          {{ end }}
          SERVICE_BUILD_PIPELINE_FIRST_STEP:
            description: "Defining the first step of the Build Pipeline"
            default: *serviceBuildPipelineFirstStep
            values:
              - *serviceBuildPipelineFirstStep
              - trigger_post_release
          MILESTONE_TAG:
            default: ""
            values:
              - ""
              - "false"
            description: "[MANDATORY]: Flag to determine the type of the release, options are:<br>
            release a milestone) Value should be an empty string<br>
            release an official version from a milestone) Value should be set to the milestone tag (e.g artifactory/7.24.0-m013) you aim to release from (will shorten the release cycle)<br>
            release an official version without a milestone) Value should be set to false"
            allowCustom: true
    steps:
      - name: create_release_branch
        type: Bash
        configuration:
          nodePool: ci_c5large
          affinityGroup: release_group
          chronological: true
          priority: 1
          inputResources:
            - name: *serviceReleasesProcessGitRepoResource
              trigger: false
            - name: *serviceMilestoneCronTrigger
              trigger: false
          integrations:
            - name: *gitPushSshIntegration
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *serviceReleasesProcessGitRepoResourcePath
              id: setup_step_commons
            - *loadReleasesProcessStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_release.sh
            - create_release_branch_on_start_new
          onExecute:
            - create_release_branch_on_execute
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: select_and_modify_release_versions
        type: Bash
        configuration:
          nodePool: ci_c5large
          affinityGroup: release_group
          priority: 1
          inputResources:
            - name: *serviceReleasesProcessGitRepoResource
              trigger: false
          inputSteps:
            - name: create_release_branch
          integrations:
            - name: *gitPushSshIntegration
          outputResources:
            - name: *releaseServicesPropertyBag
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *serviceReleasesProcessGitRepoResourcePath
              id: setup_step_commons
            - *loadReleasesProcessStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_release.sh
          onExecute:
            - select_release_versions_on_execute
            - modify_metadata_files_commit_and_push
            - check_if_tag_already_exists
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: wait_for_branch_sync
        type: Bash
        configuration:
          nodePool: ci_c5large
          affinityGroup: release_group
          priority: 1
          inputResources:
            - name: *serviceReleasesProcessGitRepoResource
              trigger: false
            - name: *releaseServicesPropertyBag
              newVersionOnly: true
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *serviceReleasesProcessGitRepoResourcePath
              id: setup_step_commons
            - *loadReleasesProcessStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_release.sh
            - wait_for_branch_sync_on_start
          onExecute:
            - wait_for_branch_sync_on_execute
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: build_release_artifacts
        type: TriggerPipeline
        configuration:
          nodePool: ci_c5large
          affinityGroup: release_group
          priority: 1
          inputResources:
            - name: *serviceReleasesProcessGitRepoResource
              trigger: false
            - name: *releaseServicesPropertyBag
              newVersionOnly: true
          inputSteps:
            - name: wait_for_branch_sync
          environmentVariables:
            JFDEV_CI_COMMONS_VERSION: ${JFDEV_CI_COMMONS_VERSION}
          pipelineName: *serviceBuildPipeline
          stepName: ${BUILD_PIPELINE_FIRST_STEP}
          branchName: ${AD_HOC_RELEASE_BRANCH_NAME}
          integrations:
            - name: jfrog_platform_embedded_pipelines
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *serviceReleasesProcessGitRepoResourcePath
              id: setup_step_commons
            - *loadReleasesProcessStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_release.sh
            - build_release_artifacts_on_start
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - build_release_artifacts_on_failure || echo "[ERROR] on_failure returned an error"
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: post_release_actions
        type: TriggerPipeline
        configuration:
          nodePool: ci_c5large
          affinityGroup: release_group
          priority: 1
          inputResources:
            - name: *serviceReleasesProcessGitRepoResource
              trigger: false
            - name: *releaseServicesPropertyBag
              newVersionOnly: true
          inputSteps:
            - name: build_release_artifacts
          environmentVariables:
            JFDEV_CI_COMMONS_VERSION: ${JFDEV_CI_COMMONS_VERSION}
          pipelineName: *servicePostReleasePipeline
          stepName: *servicePostReleasePipelineFirstStep
          branchName: ${AD_HOC_RELEASE_BRANCH_NAME}
          integrations:
            - name: jfrog_platform_embedded_pipelines
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *serviceReleasesProcessGitRepoResourcePath
              id: setup_step_commons
            - *loadReleasesProcessStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_release.sh
            - post_release_actions_on_start
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"
    {{end}}

    # postRelease pipeline - available for adhoc branches only ((release|milestone)/<short-name>-<timestamp>-<source-branch>)
    {{ if or ( hasPrefix "release" "{{gitBranch}}" ) ( hasPrefix "milestone" "{{gitBranch}}" ) }}
  - name: *servicePostReleasePipeline
    configuration:
      integrations:
        - name: jfdev_agent
        - name: entplus_deployer
        - name: docker_jfrog_io_reader
        - name: slack_platform_release_pipeline
        - name: slack_dev_foundation_alerts
        - name: entplus_jfrog_io_docker
        - name: aws_build_nodes_metrics
        - name: entplus_pipelines
      environmentVariables:
        readOnly:
          SLACK_RELEASE_INTEGRATION_CHANNEL:
            default: "platform-release-pipeline"
          SERVICE_INCLUDED_SERVICES:
            default: *serviceIncludedServices
          SKIP_STEP_STATUS_UPDATE:
            default: "true"
            description: "[DO_NOT_CHANGE] Skips step status update to bitbucket"
            values:
              - "true"
              - "false"
          PIPELINE_GIT_PUSH_SSH_INTEGRATION:
            default: *gitPushSshIntegration
            values:
              - *gitPushSshIntegration
          GIT_LFS_SKIP_SMUDGE:
            default: "true"
            description: "Git LFS skip the smudge process"
          UTP_COMPONENT_NAME:
            default: *utpComponentName
            description: "Name of the component_name which was released"
          UTP_PIPELINE_BRANCH_NAME:
            default: *utpPipelineBranchName
            description: "Name of the branch of the UTP"
          UTP_TEST_PIPELINE_BRANCH_NAME:
            default: *utpTestPipelineBranchName
            description: "What branch of underlaid UTP TESTS will be triggered"
          UTP_WEBHOOK_INTEGRATION_NAME:
            default: *utpIncomingWebhookIntegration
            description: "Name of IncomingWebhook integration which will be used by UTP"
          UTP_WEBHOOK_INTEGRATION_URL:
            default: *utpIncomingWebhookIntegrationUrl
            description: "URL which will be used for updating UTP webhook resource"
          UTP_WAIT_STATUS_STEP_NAME:
            default: *utpWaitStatusStepName
            description: "Name of the step which will wait approval from UTP"
          ENABLE_UTP:
            default: *ENABLE_UTP
            description: "Control enabling of UTP flow"
#          DVU_COMPONENT_NAME:
#            default: *dvuComponentName
#            description: "Name of the component_name which was used for DVU triggering"
#          DVU_WEBHOOK_INTEGRATION_NAME:
#            default: *dvuIncomingWebhookIntegration
#            description: "Name of IncomingWebhook integration which will be used by DVU"
#          DVU_WEBHOOK_INTEGRATION_URL:
#            default: *dvuIncomingWebhookIntegrationUrl
#            description: "URL which will be used for updating DVU webhook resource"
    steps:
      - name: promote_builds_to_staging_milestone_repositories
        type: Bash
        configuration:
          nodePool: ci_c5large
          priority: 1
          inputResources:
            - name: *servicePostReleaseGitRepoResource
              trigger: false
          outputResources:
            - name: *promoteReleasePropertyBag
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePostReleaseGitRepoResourcePath
              id: setup_step_commons
            - *loadPostReleaseStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_post_release.sh
            - post_release_on_start
          onExecute:
            - promoteMilestone_on_execute
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: tag_releases
        type: Bash
        configuration:
          nodePool: ci_c5large
          priority: 1
          inputResources:
            - name: *servicePostReleaseGitRepoResource
              trigger: false
          inputSteps:
            - name: promote_builds_to_staging_milestone_repositories
          integrations:
            - name: artifactory_bitbucket_push
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePostReleaseGitRepoResourcePath
              id: setup_step_commons
            - *loadPostReleaseStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_post_release.sh
            - post_release_on_start
            - tag_releases_on_start
          onExecute:
            - tag_releases_on_execute
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: trigger_utp
        type: Bash
        configuration:
          nodePool: ci_c5large
          integrations:
            - name: *utpIncomingWebhookIntegration
          inputSteps:
            - name: tag_releases
          inputResources:
            - name: *servicePostReleaseGitRepoResource
              trigger: false
          outputResources:
            - name: *triggerUtpPropertyBag
            - name: *skipTriggerUtpPropertyBag
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePostReleaseGitRepoResourcePath
              id: setup_step_commons
            - *loadPostReleaseStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_post_release.sh
            - post_release_on_start
          onExecute:
            - postRelease_trigger_utp
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: *utpWaitStatusStepName
        type: Bash
        configuration:
          inputResources:
            - name: *servicePostReleaseGitRepoResource
              trigger: false
            - name: *triggerUtpPropertyBag
              newVersionOnly: true
          requiresApproval:
            timeoutSeconds: 7200
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePostReleaseGitRepoResourcePath
              id: setup_step_commons
            - *loadPostReleaseStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_post_release.sh
            - post_release_on_start
          onExecute:
            - echo "Step id is ${step_id}"
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: show_utp_links
        type: Bash
        configuration:
          timeoutSeconds: 7200
          inputResources:
            - name: *servicePostReleaseGitRepoResource
              trigger: false
            - name: *triggerUtpPropertyBag
              newVersionOnly: true
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePostReleaseGitRepoResourcePath
              id: setup_step_commons
            - *loadPostReleaseStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_post_release.sh
            - post_release_on_start
          onExecute:
            - postRelease_show_utp_data
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: promote_builds_to_release_repositories
        type: Bash
        configuration:
          nodePool: ci_c5large
          priority: 1
          inputSteps:
            - name: *utpWaitStatusStepName
              status:
                - success
                - skipped
          inputResources:
            - name: *servicePostReleaseGitRepoResource
              trigger: false
            - name: *promoteReleasePropertyBag
            #              newVersionOnly: true
            - name: *skipTriggerUtpPropertyBag
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePostReleaseGitRepoResourcePath
              id: setup_step_commons
            - *loadPostReleaseStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_post_release.sh
            - post_release_on_start
            - promoteRelease_on_start
          onExecute:
            - promoteRelease_on_execute
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: post_successful_release_steps
        type: Bash
        configuration:
          nodePool: ci_c5large
          integrations:
            - name: jira_jfrog
          inputResources:
            - name: *servicePostReleaseGitRepoResource
              trigger: false
          inputSteps:
            - name: promote_builds_to_release_repositories
          # FIXME [YA] Blocked on https://jfrog-int.atlassian.net/browse/PIPE-6484
          #              status:
          #                - success
          #                - skipped
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *servicePostReleaseGitRepoResourcePath
              id: setup_step_commons
            - *loadPostReleaseStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_post_release.sh
            - post_release_on_start
          onExecute:
            - post_successful_release_steps_on_execute
          onSuccess:
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"
    {{ end }}

  {{ if or ( eq "{{gitBranch}}" "master" ) }}
#      - name: trigger_dvu
#        type: Bash
#        configuration:
#          integrations:
#            - name: *dvuIncomingWebhookIntegration
#          inputResources:
#            - name: *servicePostReleaseGitRepoResource
#              trigger: false
#          inputSteps:
#            - name: post_successful_release_steps
#        execution:
#          onStart:
#            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
#              input:
#                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
#                PROJECT_ROOT_DIR: *dvuGitRepoResourcePath
#              id: setup_step_commons
#            - *loadDependencyVersionUpdateStepCommonsFromTask
#            - stepCommons_load_script build/ci/scripts/pipelines_post_release.sh
#          onExecute:
#            - post_trigger_dvu_on_execute
#          onSuccess:
#            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
#          onFailure:
#            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
#          onComplete:
#            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
#            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"
  {{ end }}

# DVU pipeline - available for master
{{ if or ( eq "{{gitBranch}}" "master" ) }}
  - name: *dvuPipeline
    configuration:
      integrations:
        - name: jfdev_agent
        - name: entplus_deployer
        - name: docker_jfrog_io_reader
        - name: slack_platform_release_pipeline
        - name: slack_dev_foundation_alerts
        - name: entplus_jfrog_io_docker
        - name: aws_build_nodes_metrics
        - name: entplus_pipelines
      environmentVariables:
        readOnly:
          CI:
            default: "true"
            description: "[DO_NOT_CHANGE] disables interactive prompts and progress bar for the JFrog CLI"
          SKIP_STEP_STATUS_UPDATE:
            default: "true"
            description: "[DO_NOT_CHANGE] Skips step status update to bitbucket"
            values:
              - "true"
              - "false"
          SERVICES_TO_RELEASE:
            default: *serviceIncludedServices
            values:
              - *serviceIncludedServices
          PIPELINE_GIT_PUSH_SSH_INTEGRATION:
            default: *gitPushSshIntegration
            values:
              - *gitPushSshIntegration
          BITBUCKET_INTEGRATION:
            default: *bitBucketIntegration
            values:
              - *bitBucketIntegration
          SERVICE_GIT_REPO_PATH:
            default: *serviceGitRepoPath
            values:
              - *serviceGitRepoPath
          GIT_LFS_SKIP_SMUDGE:
            default: "true"
            description: "Git LFS skip the smudge process"
          SERVICE_DISPLAY_NAME:
            default: *serviceDisplayName
            values:
              - *serviceDisplayName
          SKIP_DVU:
            default: *dvuSkip
            description: "Skip DVU pipeline"
            values:
              - "true"
              - "false"
#          DVU_WEBHOOKS:
#            default: *dvuWebhook
#            description: "String with webhook names for dvu triggering"
#            values:
#              - *dvuWebhook
          DEBUG:
            default: "false"
            description: "Enable Debug messages for steps if implemented"
            values:
              - "true"
              - "false"
          PIPELINES_VERBOSE:
            default: "false"
            description: "Enable verbose for bash"
            values:
              - "true"
              - "false"

    steps:
      - name: dependency_version_check
        type: Bash
        configuration:
          chronological: true
          priority: 1
          affinityGroup: dvu_group
          inputResources:
            - name: *dvuGitRepoResource
              trigger: false
          outputResources:
            - name: *dvuChecksPropertyBag
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *dvuGitRepoResourcePath
              id: setup_step_commons
            - *loadDependencyVersionUpdateStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_dependency_version_update.sh
            - select_dependency_version_on_start
          onExecute:
            - select_dependency_version_on_execute
          onSuccess:
            - select_dependency_version_on_success || echo "[ERROR] on_success returned an error"
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: jira_creation
        type: Bash
        configuration:
          chronological: true
          priority: 1
          affinityGroup: dvu_group
          integrations:
            - name: jira_jfrog
          inputSteps:
            - name: dependency_version_check
          inputResources:
            - name: *dvuGitRepoResource
              trigger: false
            - name: *dvuChecksPropertyBag
              newVersionOnly: true
          outputResources:
            - name: *dvuJirasPropertyBag
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *dvuGitRepoResourcePath
              id: setup_step_commons
            - *loadDependencyVersionUpdateStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_dependency_version_update.sh
            - jira_creation_on_start
          onExecute:
            - jira_creation_on_execute
          onSuccess:
            - jira_creation_on_success || echo "[ERROR] on_success returned an error"
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: create_dvu_branch
        type: Bash
        configuration:
          priority: 1
          affinityGroup: dvu_group
          inputSteps:
            - name: jira_creation
          integrations:
            - name: *gitPushSshIntegration
          inputResources:
            - name: *dvuGitRepoResource
              trigger: false
            - name: *dvuJirasPropertyBag
              newVersionOnly: true
          outputResources:
            - name: *dvuBranchesPropertyBag
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *dvuGitRepoResourcePath
              id: setup_step_commons
            - *loadDependencyVersionUpdateStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_dependency_version_update.sh
            - create_dvu_branch_on_start
          onExecute:
            - create_dvu_branch_on_execute
          onSuccess:
            - create_dvu_branch_on_success || echo "[ERROR] on_success returned an error"
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: check_repositories_exist
        type: Bash
        configuration:
          timeoutSeconds: 1200
          priority: 1
          affinityGroup: dvu_group
          inputResources:
            - name: *dvuGitRepoResource
              trigger: false
            - name: *dvuBranchesPropertyBag
              newVersionOnly: true
          inputSteps:
            - name: create_dvu_branch
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *dvuGitRepoResourcePath
              id: setup_step_commons
            - *loadDependencyVersionUpdateStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_dependency_version_update.sh
            - check_repositories_exist_on_start
          onExecute:
            - check_repositories_exist_on_execute
          onSuccess:
            - check_repositories_exist_on_success || echo "[ERROR] on_success returned an error"
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: wait_for_branch_sync
        type: Bash
        configuration:
          timeoutSeconds: 1200
          priority: 1
          affinityGroup: dvu_group
          inputResources:
            - name: *dvuGitRepoResource
              trigger: false
            - name: *dvuBranchesPropertyBag
              newVersionOnly: true
          inputSteps:
            - name: check_repositories_exist
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
                JFDEV_CI_COMMONS_DEFAULT_VERSION: {{ .Values.jfdevCiCommonsDefaultVersion }}
                PROJECT_ROOT_DIR: *dvuGitRepoResourcePath
              id: setup_step_commons
            - *loadDependencyVersionUpdateStepCommonsFromTask
            - stepCommons_load_script build/ci/scripts/pipelines_dependency_version_update.sh
            - wait_for_branch_sync_on_start
          onExecute:
            - wait_for_branch_sync_on_execute
          onSuccess:
            - wait_for_branch_sync_on_success || echo "[ERROR] on_success returned an error"
            - stepCommons_on_success || echo "[ERROR] stepCommons_on_success returned an error"
          onFailure:
            - stepCommons_on_failure || echo "[ERROR] stepCommons_on_failure returned an error"
          onComplete:
            - stepCommons_pre_on_complete || echo "[ERROR] stepCommons_pre_on_complete returned an error"
            - stepCommons_on_complete || echo "[ERROR] stepCommons_on_complete returned an error"

      - name: modify_dvu_versions
        type: Bash
        configuration:
          priority: 1
          affinityGroup: dvu_group
          inputResources:
            - name: *dvuGitRepoResource
              trigger: false
          integrations:
            - name: *gitPushSshIntegration
          inputSteps:
            - name: wait_for_branch_sync
        execution:
          onStart:
            - task: jfdev-ci-commons/setup-step-commons@v0.0.1
              input:
