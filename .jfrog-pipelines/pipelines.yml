resources:
 - name: connecting_resource_node_test_k
   type: PropertyBag
   configuration:
     key1: value1
     key2: value2
 - name: resource_pipelines
   type: GitRepo
   configuration:
     gitProvider: mygithub
     path: kunal-mazumdar/pipelines-local-test-repo
     files: 
       include: ^README.md$
     branches:
       include: ^{{gitBranch}}$
#      buildOn:
#        commit: true

pipelines:
  - name: testing1
    steps:
#       - name: test_step
#         type: Bash
# #         configuration:
# #          requiresApproval:
# #            approvers:
# #              - admin
#         #            notifications:
#         #              - integrationName: pipelines_mqtest_slack
#         execution:
#          onExecute:
#            - echo "Got the approval"
      - name: myStep1
        type: Bash
        configuration:
         environmentVariables:
           DEFAULT_UBUNTU_NODEPOOL_OS:
             allowCustom: true
             default: "Ubuntu_18.04"
             description: "Default operating system for node pool tests"
           DEFAULT_NODEPOOL_NUMBEROFNODES:
             allowCustom: true
             default: 1
             description: "Default number of nodes for node pool tests"
           DEFAULT_UBUNTU_NODEPOOL_OS_1:
             allowCustom: true
             default: "Ubuntu_18.04"
             description: "Default operating system for node pool tests"
           DEFAULT_NODEPOOL_NUMBEROFNODES_1:
             allowCustom: true
             default: 1
             description: "Default number of nodes for node pool tests"
         inputResources: 
           - name: resource_pipelines
         integrations:
           - name: mygithub
#            - name: slackTest
#            - name: smtpNotification
        execution:
          onExecute:
#             - printenv
            - pushd $res_resource_pipelines_resourcePath
            - ls
            - echo "hi"
#             - send_notification slackTest --text "Pipeline test"
#             - send_notification smtpNotification --recipients "nehamishraj01@gmail.com" --subject "Build Succeeded" --body "Message received"

#           onSuccess:
#             - pushd $res_resource_pipelines_resourcePath
#             - ls

  - name: testing2
    steps:
      - name: myStep2
        type: Bash
        configuration:
        #  nodePool: u20dynamic
         integrations:
           - name: mygithub
        execution:
          onExecute:
            - echo "hi"
  - name: testing3
    steps:
      - name: myStep3
        type: Bash
        # configuration:
        #  nodePool: c7dynamic
        execution:
          onExecute:
            - echo "hi"
         
  - name: testing4
    steps:
      - name: myStep4
        type: PowerShell
        # configuration:
        #  nodePool: win_2019
        execution:
          onExecute:
            - echo "hi"


# resources:
#   - name: R_CronTrigger_resource
#     type: CronTrigger
#     configuration:
#       interval: "* * * * *"
#       branches:
#         include: "^master$"
#         exclude: "^test$"

# pipelines:
#   - name: R_CronTrigger_pipe
#     steps:
#       - name: R_CronTrigger_step
#         type: Bash
#         configuration:
#           inputResources:
#             - name: R_CronTrigger_resource
#         execution:
#           onExecute:
#             - echo hello


# pipelines:
  - name: node_test_
    steps:
      - name: nodeTestStep
        type: Bash
        configuration:
          # nodePool: u18dynamic
          outputResources: 
            - name: connecting_resource_node_test_k
#               trigger: false
          integrations:
            - name: mygithub
        execution:
          onExecute:
            - write_output connecting_resource_node_test_k "test=value"

      - name: c7dynamic
        type: Bash
        configuration:
          # nodePool: c7dynamic
          inputResources:
            - name: connecting_resource_node_test_k
        execution:
          onExecute:
            - printenv
            - docker images
            
      - name: u20dynamic
        type: Bash
        configuration:
          # nodePool: u20dynamic
          inputResources:
            - name: connecting_resource_node_test_k
        execution:
          onExecute:
            - printenv
            - docker images

      - name: win_2019
        type: PowerShell
        configuration:
          # nodePool: win_2019
          inputResources:
            - name: connecting_resource_node_test_k
        execution:
          onExecute:
            - write-output "Hi"
            - docker images
